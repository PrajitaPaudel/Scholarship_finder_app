

import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:scholarshuip_finder_app/features/student/domain/entity/course_entity.dart';

import '../../../../app/usecase/usecase.dart';
import '../../../../core/error/failure.dart';
import '../entity/contact_entity.dart';
import '../entity/location_entity.dart';
import '../entity/scholarship_provider_entity.dart';
import '../repository/remote_instituted_repository.dart';

class ScholorProviderParams extends Equatable{
  final String userId;
  final String name;
  final String profilePhoto;
  final String? coverPhoto;
  final List<String>? galleryImages;
  final String contactPhone;
  final String contactEmail;
  final String city;
  final String country;
  final String university;
  final String description;
  final String scholorType;
  ScholorProviderParams(  {
    required this.userId,
    required this.name,
    required this.profilePhoto,
    this.coverPhoto,
    this.galleryImages,
    required this.contactPhone,
    required this.contactEmail,
    required this.city,
    required this.country,
    required this.university,
    required this.description,
    required this.scholorType,
});

  @override
  List<Object?> get props => [
    userId,
    name,
    profilePhoto,
    coverPhoto,
    galleryImages,
    contactPhone,
    contactEmail,
    city,
    country,
    university,
    description,
    scholorType
  ];
}

class AddScholarshipProviderUseCase implements UsecaseWithParams<ScholarshipProviderEntity, ScholorProviderParams> {
  final InstitutedRepository repository;

  AddScholarshipProviderUseCase(this.repository);

  @override
  Future<Either<Failure, ScholarshipProviderEntity>> call(ScholorProviderParams params) async {
    try {
      // Convert params to entity
      final scholarshipProvider = ScholarshipProviderEntity(
        id: '', // ID will be generated by the backend
        userId: params.userId,
        name: params.name,
        profilePhoto: params.profilePhoto,
        coverPhoto: params.coverPhoto,
        galleryImages: params.galleryImages,
        contact: ContactEntity(
          phoneNumber: params.contactPhone,
          officialEmail: params.contactEmail,
        ),
        location: LocationEntity(
          city: params.city,
          country: params.country,
        ),
        university: params.university,
        description: params.description,course: CourseEntity(
        id: '',
        userId: params.userId,
          title: params.name,
          description: params.description,
          scholarshipType: params.scholorType)
      );

      // Call the repository method
      final result = await repository.addInstitute(scholarshipProvider);

      return result.fold(
            (failure) => Left(failure),
            (scholarshipProvider) => Right(scholarshipProvider),
      );
    } catch (error) {
      return Left(ApiFailure(message: error.toString()));
    }
  }
}

